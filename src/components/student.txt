import { useState, useEffect } from "react";
import axios from "axios";
import { Calendar, Clock, User, FileText, Bell, Home, Settings, LogOut, ChevronDown, ChevronUp, CheckCircle, XCircle, Clock as ClockIcon, AlertCircle, MessageSquare } from "lucide-react";

const StudentDashboard = () => {
  // State for navigation
  const [activeTab, setActiveTab] = useState("home");
  
  // State for query submission
  const [showCalendar, setShowCalendar] = useState(false);
  const [date, setDate] = useState("");
  const [category, setCategory] = useState("");
  const [description, setDescription] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // State for dashboard data
  const [studentId, setStudentId] = useState("60d21b4667d0d8992e610c85"); // Ensure this ID is valid
  const [studentData, setStudentData] = useState({
    name: "John Doe",
    email: "john.doe@university.edu",
    id: "STU20240317",
    department: "Computer Science",
    year: "3rd Year",
    profileImage: null
  });
  
  // State for queries and notifications
  const [queries, setQueries] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [selectedQuery, setSelectedQuery] = useState(null);
  const [queriesFilter, setQueriesFilter] = useState("all");
  const [replyContent, setReplyContent] = useState("");
  
  // Calendar utilities
  const months = [
    "January", "February", "March", "April", "May", "June", 
    "July", "August", "September", "October", "November", "December"
  ];
  
  const currentDate = new Date();
  const [currentMonth, setCurrentMonth] = useState(currentDate.getMonth());
  const [currentYear, setCurrentYear] = useState(currentDate.getFullYear());
  
  // Fetch user data and queries
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        // Fetch student queries
        const queriesResponse = await axios.get(`http://localhost:5000/students/${studentId}/queries`);
        setQueries(queriesResponse.data || []);
        
        // Fetch notifications
       
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };
    
    if (studentId) {
      fetchUserData();
    }
  }, [studentId]);
  
  // Calendar functions
  const getDaysInMonth = (month, year) => {
    return new Date(year, month + 1, 0).getDate();
  };
  
  const getFirstDayOfMonth = (month, year) => {
    return new Date(year, month, 1).getDay();
  };
  
  const renderCalendar = () => {
    const daysInMonth = getDaysInMonth(currentMonth, currentYear);
    const firstDay = getFirstDayOfMonth(currentMonth, currentYear);
    const days = [];
    
    // Empty cells for days before the first day of the month
    for (let i = 0; i < firstDay; i++) {
      days.push(<div key={`empty-${i}`} className="h-8 w-8"></div>);
    }
    
    // Days of the month
    for (let i = 1; i <= daysInMonth; i++) {
      const dateString = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
      const isSelected = dateString === date;
      const isToday = 
        i === currentDate.getDate() && 
        currentMonth === currentDate.getMonth() && 
        currentYear === currentDate.getFullYear();
      
      days.push(
        <div 
          key={i} 
          onClick={() => {
            setDate(dateString);
            setShowCalendar(false);
          }}
          className={`flex items-center justify-center h-8 w-8 rounded-full cursor-pointer text-sm
            ${isSelected ? 'bg-blue-600 text-white' : ''}
            ${isToday && !isSelected ? 'border border-blue-400' : ''}
            ${!isSelected && !isToday ? 'hover:bg-gray-100' : ''}
          `}
        >
          {i}
        </div>
      );
    }
    
    return days;
  };
  
  const formatDisplayDate = (dateString) => {
    if (!dateString) return "";
    const [year, month, day] = dateString.split('-');
    return `${months[parseInt(month) - 1]} ${parseInt(day)}, ${year}`;
  };
  
  // Submit new query
  const submitQuery = async () => {
    if (!date || !category || !description) {
      alert("Please fill all required fields");
      return;
    }

    console.log("Fetching queries for studentId:", studentId);

    
    setIsSubmitting(true);
    try {
      // Format the date as an ISO string for MongoDB compatibility
      const formattedDate = new Date(date).toISOString();

      
      await axios.post("http://localhost:5000/queries", { 
        studentId, date: formattedDate, category, description
      });
      
      alert("Query submitted successfully!");
      setDate("");
      setCategory("");
      setDescription("");
      
      // Refresh queries
      const updatedQueries = await axios.get(`http://localhost:5000/students/${studentId}/queries`);
      console.log(updatedQueries.data);
      setQueries(updatedQueries.data);
      
      // Switch to "My Queries" tab
      setActiveTab("queries");
      
    } catch (error) {
      console.error("Error submitting query:", error);
      alert(`Failed to submit query: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Submit reply to a query
  const submitReply = async () => {
    if (!selectedQuery || !replyContent.trim()) {
      return;
    }

    try {
      await axios.post(`http://localhost:5000/queries/${selectedQuery._id}/replies`, {
        studentId,
        content: replyContent
      });

      // Refresh the selected query
      const queryResponse = await axios.get(`http://localhost:5000/queries/${selectedQuery._id}`);
      setSelectedQuery(queryResponse.data);
      setReplyContent("");
      
      // Refresh all queries
      const queriesResponse = await axios.get(`http://localhost:5000/students/${studentId}/queries`);
      setQueries(queriesResponse.data);
    } catch (error) {
      console.error("Error submitting reply:", error);
      alert("Failed to submit reply");
    }
  };

  // Mark notification as read
  const markNotificationAsRead = async (notificationId) => {
    try {
      await axios.put(`http://localhost:5000/notifications/${notificationId}/read`);
      
      // Update notifications list
      setNotifications(notifications.map(n => 
        n._id === notificationId ? { ...n, read: true } : n
      ));
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };
  
  // Get status color
  const getStatusColor = (status) => {
    switch(status) {
      case "Pending": return "bg-yellow-100 text-yellow-800";
      case "In Progress": return "bg-blue-100 text-blue-800";
      case "Answered": return "bg-green-100 text-green-800";
      case "Closed": return "bg-gray-100 text-gray-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };
  
  const getStatusIcon = (status) => {
    switch(status) {
      case "Pending": return <AlertCircle className="h-4 w-4" />;
      case "In Progress": return <ClockIcon className="h-4 w-4" />;
      case "Answered": return <CheckCircle className="h-4 w-4" />;
      case "Closed": return <XCircle className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };
  
  // Filter queries
  const filteredQueries = queriesFilter === "all" 
    ? queries 
    : queries.filter(query => query.status === queriesFilter);
  
  // Render dashboard content based on active tab
  const renderContent = () => {
    switch(activeTab) {
      case "home":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Student Dashboard</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              {/* Summary Cards */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-2">Queries</h3>
                <div className="flex justify-between items-center">
                  <span className="text-3xl font-bold">{queries.length}</span>
                  <FileText className="h-8 w-8 text-blue-500" />
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <div>Pending: {queries.filter(q => q.status === "Pending").length}</div>
                  <div>Answered: {queries.filter(q => q.status === "Answered").length}</div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-2">Notifications</h3>
                <div className="flex justify-between items-center">
                  <span className="text-3xl font-bold">{notifications.length}</span>
                  <Bell className="h-8 w-8 text-blue-500" />
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <div>Unread: {notifications.filter(n => !n.read).length}</div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-2">Profile</h3>
                <div className="flex justify-between items-center">
                  <span className="text-xl font-semibold">{studentData.name}</span>
                  <User  className="h-8 w-8 text-blue-500" />
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  <div>{studentData.department}</div>
                  <div>{studentData.year}</div>
                </div>
              </div>
            </div>
            
            {/* Recent Queries & Notifications */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Recent Queries</h3>
                {queries.length === 0 ? (
                  <p className="text-gray-500">No queries submitted yet.</p>
                ) : (
                  <div className="space-y-3">
                    {queries.slice(0, 3).map(query => (
                      <div key={query._id} className="border-b pb-2">
                        <div className="flex justify-between items-center">
                          <span className="font-medium">{query.category}</span>
                          <span className={`px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1 ${getStatusColor(query.status)}`}>
                            {getStatusIcon(query.status)}
                            {query.status}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 truncate">{query.description}</p>
                        <p className="text-xs text-gray-400">{new Date(query.date).toLocaleDateString()}</p>
                      </div>
                    ))}
                    <button 
                      onClick={() => setActiveTab("queries")}
                      className="text-sm text-blue-600 hover:underline"
                    >
                      View all queries
                    </button>
                  </div>
                )}
              </div>
              
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Recent Notifications</h3>
                {notifications.length === 0 ? (
                  <p className="text-gray-500">No notifications.</p>
                ) : (
                  <div className="space-y-3">
                    {notifications.slice(0, 3).map(notification => (
                      <div key={notification._id} className="border-b pb-2">
                        <div className="flex justify-between items-center">
                          <span className="font-medium">{notification.title}</span>
                          {!notification.read && (
                            <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-semibold">New</span>
                          )}
                        </div>
                        <p className="text-sm text-gray-600">{notification.message}</p>
                        <p className="text-xs text-gray-400">{new Date(notification.date).toLocaleDateString()}</p>
                      </div>
                    ))}
                    <button 
                      onClick={() => setActiveTab("notifications")}
                      className="text-sm text-blue-600 hover:underline"
                    >
                      View all notifications
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        );
        
      case "new-query":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Submit New Query</h2>
            
            <div className="bg-white rounded-lg shadow p-6 max-w-xl mx-auto">
              {/* Date Picker */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <div className="relative">
                  <div 
                    onClick={() => setShowCalendar(!showCalendar)}
                    className="flex items-center justify-between w-full p-2 border border-gray-300 rounded-md cursor-pointer"
                  >
                    <span className={date ? "text-gray-800" : "text-gray-400"}>
                      {date ? formatDisplayDate(date) : "Select a date"}
                    </span>
                    <Calendar className="h-5 w-5 text-gray-400" />
                  </div>
                </div>
                  
                {showCalendar && (
                  <div className="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md border border-gray-200 p-3">
                    <div className="flex items-center justify-between mb-2">
                      <button
                        onClick={() => {
                          if (currentMonth === 0) {
                            setCurrentMonth(11);
                            setCurrentYear(currentYear - 1);
                          } else {
                            setCurrentMonth(currentMonth - 1);
                          }
                        }}
                        className="p-1 hover:bg-gray-100 rounded"
                      >
                        <ChevronUp className="h-4 w-4" />
                      </button>
                      <span className="font-medium">
                        {months[currentMonth]} {currentYear}
                      </span>
                      <button
                        onClick={() => {
                          if (currentMonth === 11) {
                            setCurrentMonth(0);
                            setCurrentYear(currentYear + 1);
                          } else {
                            setCurrentMonth(currentMonth + 1);
                          }
                        }}
                        className="p-1 hover:bg-gray-100 rounded"
                      >
                        <ChevronDown className="h-4 w-4" />
                      </button>
                    </div>
                    
                    <div className="grid grid-cols-7 gap-1 text-center">
                      <div className="text-xs font-medium text-gray-500">Su</div>
                      <div className="text-xs font-medium text-gray-500">Mo</div>
                      <div className="text-xs font-medium text-gray-500">Tu</div>
                      <div className="text-xs font-medium text-gray-500">We</div>
                      <div className="text-xs font-medium text-gray-500">Th</div>
                      <div className="text-xs font-medium text-gray-500">Fr</div>
                      <div className="text-xs font-medium text-gray-500">Sa</div>
                      {renderCalendar()}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Category */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  className="block w-full p-2 border border-gray-300 rounded-md"
                >
                  <option value="">Select category</option>
                  <option value="Academic">Academic</option>
                  <option value="Financial">Financial</option>
                  <option value="Administrative">Administrative</option>
                  <option value="Technical">Technical</option>
                  <option value="Others">Others</option>
                </select>
              </div>
              
              {/* Description */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows="4"
                  className="block w-full p-2 border border-gray-300 rounded-md"
                  placeholder="Please describe your query in detail..."
                ></textarea>
              </div>
              
              {/* Submit Button */}
              <div className="flex justify-end">
                <button
                  onClick={submitQuery}
                  disabled={isSubmitting || !date || !category || !description}
                  className={`px-4 py-2 rounded-md text-white font-medium 
                    ${isSubmitting || !date || !category || !description
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700'
                    }`}
                >
                  {isSubmitting ? 'Submitting...' : 'Submit Query'}
                </button>
              </div>
            </div>
          </div>
        );
        
      case "queries":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">My Queries</h2>
            
            <div className="bg-white rounded-lg shadow">
              {/* Filter tabs */}
              <div className="flex border-b px-4">
                <button
                  onClick={() => setQueriesFilter("all")}
                  className={`py-3 px-4 border-b-2 font-medium text-sm ${
                    queriesFilter === "all"
                      ? "border-blue-600 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  All
                </button>
                <button
                  onClick={() => setQueriesFilter("Pending")}
                  className={`py-3 px-4 border-b-2 font-medium text-sm ${
                    queriesFilter === "Pending"
                      ? "border-blue-600 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  Pending
                </button>
                <button
                  onClick={() => setQueriesFilter("In Progress")}
                  className={`py-3 px-4 border-b-2 font-medium text-sm ${
                    queriesFilter === "In Progress"
                      ? "border-blue-600 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  In Progress
                </button>
                <button
                  onClick={() => setQueriesFilter("Answered")}
                  className={`py-3 px-4 border-b-2 font-medium text-sm ${
                    queriesFilter === "Answered"
                      ? "border-blue-600 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  Answered
                </button>
                <button
                  onClick={() => setQueriesFilter("Closed")}
                  className={`py-3 px-4 border-b-2 font-medium text-sm ${
                    queriesFilter === "Closed"
                      ? "border-blue-600 text-blue-600"
                      : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
                >
                  Closed
                </button>
              </div>
              
              {/* Queries List */}
              {filteredQueries.length === 0 ? (
                <div className="p-8 text-center text-gray-500">
                  No queries found.
                </div>
              ) : (
                <div className="divide-y">
                  {filteredQueries.map(query => (
                    <div 
                      key={query._id} 
                      className={`p-4 hover:bg-gray-50 cursor-pointer ${
                        selectedQuery && selectedQuery._id === query._id ? "bg-gray-50" : ""
                      }`}
                      onClick={() => setSelectedQuery(query)}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-medium">{query.category}</h3>
                          <p className="text-sm text-gray-600 line-clamp-2">{query.description}</p>
                          <div className="flex items-center gap-2 mt-1 text-xs text-gray-500">
                            <Calendar className="h-3 w-3" />
                            <span>{new Date(query.date).toLocaleDateString()}</span>
                            {query.lastUpdated && (
                              <>
                                <Clock className="h-3 w-3 ml-2" />
                                <span>Updated: {new Date(query.lastUpdated).toLocaleDateString()}</span>
                              </>
                            )}
                          </div>
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1 ${getStatusColor(query.status)}`}>
                          {getStatusIcon(query.status)}
                          {query.status}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            {/* Query Detail View */}
            {selectedQuery && (
              <div className="mt-6 bg-white rounded-lg shadow p-6">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-bold">{selectedQuery.category}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1 ${getStatusColor(selectedQuery.status)}`}>
                    {getStatusIcon(selectedQuery.status)}
                    {selectedQuery.status}
                  </span>
                </div>
                
                <div className="flex items-center gap-2 mb-2 text-sm text-gray-500">
                  <Calendar className="h-4 w-4" />
                  <span>Submitted: {new Date(selectedQuery.date).toLocaleDateString()}</span>
                </div>
                
                <div className="bg-gray-50 p-4 rounded-md mb-6">
                  <p className="whitespace-pre-wrap">{selectedQuery.description}</p>
                </div>
                
                {/* Conversation */}
                <div className="mb-4">
                  <h4 className="font-medium mb-2">Conversation</h4>
                  
                  {selectedQuery.replies && selectedQuery.replies.length > 0 ? (
                    <div className="space-y-4">
                      {selectedQuery.replies.map(reply => (
                        <div 
                          key={reply._id} 
                          className={`p-3 rounded-lg ${
                            reply.isAdmin 
                              ? "bg-blue-50 ml-8" 
                              : "bg-gray-50 mr-8"
                          }`}
                        >
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-medium text-sm">
                              {reply.isAdmin ? "Admin" : "You"}
                            </span>
                            <span className="text-xs text-gray-500">
                              {new Date(reply.date).toLocaleString()}
                            </span>
                          </div>
                          <p className="text-sm">{reply.content}</p>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4 text-gray-500">
                      No replies yet.
                    </div>
                  )}
                </div>
                
                {/* Reply form */}
                {selectedQuery.status !== "Closed" && (
                  <div>
                    <div className="flex items-start gap-2">
                      <textarea
                        value={replyContent}
                        onChange={(e) => setReplyContent(e.target.value)}
                        className="flex-1 p-2 border border-gray-300 rounded-md text-sm"
                        rows="3"
                        placeholder="Type your reply..."
                      ></textarea>
                      <button
                        onClick={submitReply}
                        disabled={!replyContent.trim()}
                        className={`px-4 py-2 rounded-md text-white text-sm ${
                          !replyContent.trim() 
                            ? "bg-gray-400" 
                            : "bg-blue-600 hover:bg-blue-700"
                        }`}
                      >
                        Send
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        );
        
      case "notifications":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Notifications</h2>
            
            <div className="bg-white rounded-lg shadow">
              {notifications.length === 0 ? (
                <div className="p-8 text-center text-gray-500">
                  No notifications.
                </div>
              ) : (
                <div className="divide-y">
                  {notifications.map(notification => (
                    <div 
                      key={notification._id} 
                      className={`p-4 ${!notification.read ? "bg-blue-50" : ""}`}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-medium">{notification.title}</h3>
                          <p className="text-sm text-gray-600">{notification.message}</p>
                          <div className="text-xs text-gray-500 mt-1">
                            {new Date(notification.date).toLocaleString()}
                          </div>
                        </div>
                        {!notification.read && (
                          <button
                            onClick={() => markNotificationAsRead(notification._id)}
                            className="text-xs text-blue-600 hover:underline"
                          >
                            Mark as read
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );
        
      case "profile":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">My Profile</h2>
            
            <div className="bg-white rounded-lg shadow p-6 max-w-2xl mx-auto">
              <div className="flex flex-col md:flex-row md:items-center gap-6">
                <div className="flex-shrink-0">
                  {studentData.profileImage ? (
                    <img 
                      src={studentData.profileImage} 
                      alt={studentData.name} 
                      className="h-24 w-24 rounded-full object-cover border-2 border-gray-200"
                    />
                  ) : (
                    <div className="h-24 w-24 rounded-full bg-gray-200 flex items-center justify-center">
                      <User  className="h-12 w-12 text-gray-400" />
                    </div>
                  )}
                </div>
                
                <div className="flex-1">
                  <h3 className="text-2xl font-bold">{studentData.name}</h3>
                  <div className="text-gray-600 mb-4">{studentData.email}</div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium text-gray-500">Student ID</label>
                      <div>{studentData.id}</div>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium text-gray-500">Department</label>
                      <div>{studentData.department}</div>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium text-gray-500">Year</label>
                      <div>{studentData.year}</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-6">
                <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                  Edit Profile
                </button>
              </div>
            </div>
          </div>
        );
        
      case "settings":
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Settings</h2>
            
            <div className="bg-white rounded-lg shadow p-6 max-w-2xl mx-auto">
              <h3 className="text-lg font-semibold mb-4">Notification Preferences</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">Email Notifications</div>
                    <div className="text-sm text-gray-600">Receive email notifications for query updates</div>
                  </div>
                  <div className="relative inline-block w-12 h-6">
                    <input type="checkbox" id="email-toggle" className="sr-only" />
                    <label 
                      htmlFor="email-toggle"
                      className="block bg-gray-300 w-12 h-6 rounded-full cursor-pointer transition-colors duration-200 ease-in-out before:absolute before:h-5 before:w-5 before:left-0.5 before:bottom-0.5 before:bg-white before:rounded-full before:transition-transform before:duration-200 before:ease-in-out before:translate-x-0 checked:bg-blue-600 checked:before:translate-x-6"
                    ></label>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">SMS Notifications</div>
                    <div className="text-sm text-gray-600">Receive SMS alerts for urgent updates</div>
                  </div>
                  <div className="relative inline-block w-12 h-6">
                    <input type="checkbox" id="sms-toggle" className="sr-only" />
                    <label 
                      htmlFor="sms-toggle"
                      className="block bg-gray-300 w-12 h-6 rounded-full cursor-pointer transition-colors duration-200 ease-in-out before:absolute before:h-5 before:w-5 before:left-0.5 before:bottom-0.5 before:bg-white before:rounded-full before:transition-transform before:duration-200 before:ease-in-out before:translate-x-0 checked:bg-blue-600 checked:before:translate-x-6"
                    ></label>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">In-App Notifications</div>
                    <div className="text-sm text-gray-600">Show notifications in the dashboard</div>
                  </div>
                  <div className="relative inline-block w-12 h-6">
                    <input type="checkbox" id="inapp-toggle" className="sr-only" defaultChecked />
                    <label 
                      htmlFor="inapp-toggle"
                      className="block bg-blue-600 w-12 h-6 rounded-full cursor-pointer transition-colors duration-200 ease-in-out before:absolute before:h-5 before:w-5 before:left-0.5 before:bottom-0.5 before:bg-white before:rounded-full before:transition-transform before:duration-200 before:ease-in-out before:translate-x-6"
                    ></label>
                  </div>
                </div>
              </div>
              
              <h3 className="text-lg font-semibold mt-8 mb-4">Account Settings</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                  <input 
                    type="email" 
                    defaultValue={studentData.email}
                    className="w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                  <input 
                    type="tel" 
                    placeholder="Enter your phone number"
                    className="w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                  <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
                    Change Password
                  </button>
                </div>
              </div>
              
              <div className="mt-6">
                <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        );
        
      default:
        return null;
    }
  };
  
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Navbar */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-blue-600">Student Query Portal</h1>
            </div>
            
            <div className="flex items-center">
              <div className="mr-4 flex items-center text-sm font-medium text-gray-700">
                <User  className="h-5 w-5 mr-1 text-gray-400" />
                {studentData.name}
              </div>
              <button className="p-1 rounded-full hover:bg-gray-100">
                <LogOut className="h-5 w-5 text-gray-400" />
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Main Container */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex flex-col md:flex-row gap-6">
          {/* Sidebar */}
          <div className="w-full md:w-64 shrink-0">
            <div className="bg-white rounded-lg shadow">
              <nav className="flex flex-col p-2">
                <button
                  onClick={() => setActiveTab("home")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "home"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <Home className="h-5 w-5 mr-2" />
                  Dashboard
                </button>
                
                <button
                  onClick={() => setActiveTab("new-query")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "new-query"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <FileText className="h-5 w-5 mr-2" />
                  New Query
                </button>
                
                <button
                  onClick={() => setActiveTab("queries")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "queries"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <MessageSquare className="h-5 w-5 mr-2" />
                  My Queries
                </button>
                
                <button
                  onClick={() => setActiveTab("notifications")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "notifications"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <Bell className="h-5 w-5 mr-2" />
                  Notifications
                  {notifications.filter(n => !n.read).length > 0 && (
                    <span className="ml-auto bg-red-500 text-white px-2 py-0.5 rounded-full text-xs">
                      {notifications.filter(n => !n.read).length}
                    </span>
                  )}
                </button>
                
                <button
                  onClick={() => setActiveTab("profile")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "profile"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <User  className="h-5 w-5 mr-2" />
                  Profile
                </button>
                
                <button
                  onClick={() => setActiveTab("settings")}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
                    activeTab === "settings"
                      ? "bg-blue-100 text-blue-700"
                      : "text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  <Settings className="h-5 w-5 mr-2" />
                  Settings
                </button>
              </nav>
            </div>
          </div>
          
          {/* Main Content */}
          <div className="flex-1 bg-white rounded-lg shadow">
            {renderContent()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default StudentDashboard;

//original
